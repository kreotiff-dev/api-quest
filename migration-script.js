/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π –∫ –∑–∞–¥–∞–Ω–∏—è–º –≤ MongoDB
 * 
 * –ó–∞–ø—É—Å–∫:
 * node migration-script.js
 */

const mongoose = require('mongoose');
require('./server/models/Task'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥–µ–ª—å Task
const Task = mongoose.model('Task');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const DB_URI = process.env.MONGO_URI || 'mongodb://localhost:27017/api-quest';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
const connectDB = async () => {
  try {
    await mongoose.connect(DB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    process.exit(1);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π
const migrateTasks = async () => {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∑–∞–¥–∞–Ω–∏–π...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
    const tasks = await Task.find({});
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${tasks.length} –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
    
    // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let updatedCount = 0;
    let skippedCount = 0;
    let errorCount = 0;
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∑–∞–¥–∞–Ω–∏—è–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
    for (const task of tasks) {
      try {
        // –ó–∞–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –ø–æ–ª–µ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∏—Ö –Ω–∞–ª–∏—á–∏—è
        const updates = {
          subtitle: "–û—Å–Ω–æ–≤—ã HTTP –∑–∞–ø—Ä–æ—Å–æ–≤",
          category: task.type === 'api' ? 'basics' : (task.type || 'basics'),
          status: "not_started",
          requirements: [
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ GET",
            "URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —É–∫–∞–∑–∞–Ω –≤ —Ä–µ—à–µ–Ω–∏–∏",
            "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"
          ],
          expectedResult: "–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ 200 OK –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.",
          verificationType: 'multiple-choice',
          verificationQuestion: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è",
          verificationOptions: [
            { value: 'correct', label: '–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ' },
            { value: 'incorrect_url', label: '–ù–µ–≤–µ—Ä–Ω—ã–π URL –∑–∞–ø—Ä–æ—Å–∞' },
            { value: 'incorrect_method', label: '–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞' }
          ],
          verification_answers: {
            beginnerAnswers: ['correct'],
            advancedAnswerKeywords: []
          }
        };
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await Task.findByIdAndUpdate(task._id, { $set: updates });
        updatedCount++;
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: ${task.title}`);
      } catch (error) {
        errorCount++;
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è ${task.title}:`, error);
      }
    }
    
    console.log('\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:');
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: ${tasks.length}`);
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount}`);
    console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    
    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    await mongoose.connection.close();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const main = async () => {
  await connectDB();
  await migrateTasks();
  process.exit(0);
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main();